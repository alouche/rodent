## Usage: rodent install [options] <version>
##        -s  Set the version globally after install
##        -p  Cross-compile for a specific platform
##        -f  Force installation
##
##        -l  List all available versions

load_available_versions() {
  [[ -f "$RODENT_GO_RELEASES_LOCAL_TRACK" && $((($(date +%s) - $(stat -L --format %Y "$RODENT_GO_RELEASES_LOCAL_TRACK")) > (RODENT_GO_RELEASES_TRACK_LAST_UPDATE_T*60))) == 0 ]] && \
      RODENT_GO_RELEASES=($(cat "$RODENT_GO_RELEASES_LOCAL_TRACK"))
}

fetch_available_versions() {
  display "fetching upstream versions..."
  RODENT_GO_RELEASES=($(_git ls-remote --tags "$RODENT_GO_GIT_URL" | grep -o 'refs/tags/go[0-9]*\.[0-9].*' | grep -o '[^\/]*$' | sort -r))
  echo "${RODENT_GO_RELEASES[@]}" > "$RODENT_GO_RELEASES_LOCAL_TRACK" || {
    fatal "failed to save \$RODENT_GO_RELEASES to $RODENT_GO_RELEASES_LOCAL_TRACK"
  }
}

list_available_versions() {
  for release in "${RODENT_GO_RELEASES[@]}"
  do
    display " ${release}"
  done
}

check_local_setup() {
  local version="$1"
  local platform="$2"

  if [ -d "$RODENT_GOROOT_TOP/$version/pkg/$platform" ]
  then
    echo 1
    return
  fi

  echo 0
}

golang_release_xtra_tag() {
  local os="$1"
  local xtra

  if [ "$os" = "darwin" ]
  then
    xtra="-osx10.6"
    if [ "$(uname -r)" \> "12" ]
    then
      xtra="-osx10.8"
    fi
  fi

  echo "$xtra"
}

install_binary() {
  local version="$1"
  local platform="$2"

  GOOS=${platform%_*}
  GOARCH=${platform#*_}

  export GOOS
  export GOARCH

  local cur_platform
  cur_platform="$(__detect_os)_$(__detect_arch)"

  local release
  release="$version.$GOOS-$GOARCH$(golang_release_xtra_tag "$GOOS").tar.gz"

  local tmpdir
  tmpdir="$(mktemp -d 2>/dev/null || mktemp -d -t 'rodent')"

  if [ ! -d "$RODENT_GOROOT_TOP/$version/src" ]
  then
    info "downloading golang source $version"

    ( __download "$RODENT_GO_RELEASES_DL/$version.src.tar.gz" "$tmpdir/$version" || \
        __download "$RODENT_GO_RELEASES_DL_LEGACY/$version.src.tar.gz" "$tmpdir/$version" ) || {
          fatal "the download failed, please retry later..."
        }

    info "untarring binary to $RODENT_GOROOT_TOP"
    __untar "$tmpdir/$version" "$RODENT_GOROOT_TOP/$version"
  fi

  pushd . > /dev/null 2>&1
  cd "$RODENT_GOROOT_TOP/$version/src"

  [[ "$platform" == "$cur_platform" ]] && {
    ./make.bash || {
      __cleanup "$RODENT_GOROOT_TOP/$version"
      fatal "compilation failed - installation aborted"
    }
  }

  info "downloading binary distribution $release"

  ( __download "$RODENT_GO_RELEASES_DL/$release" "$tmpdir/$release" || \
      __download "$RODENT_GO_RELEASES_DL_LEGACY/$release" "$tmpdir/$release" ) || {
      fatal "the download failed, please retry later..."
  }

  __untar "$tmpdir/$release" "$tmpdir/$version-$GOOS-$GOARCH"
  cp -Rf "$tmpdir/$version-$GOOS-$GOARCH/pkg/${GOOS}_$GOARCH/" "$RODENT_GOROOT_TOP/$version/pkg/"
  ( cp -Rf "$tmpdir/$version-$GOOS-$GOARCH/src/runtime/z"*"_${GOOS}_$GOARCH."* "$RODENT_GOROOT_TOP/$version/src/runtime/" || \
    cp -Rf "$tmpdir/$version-$GOOS-$GOARCH/src/pkg/runtime/z"*"_${GOOS}_$GOARCH."* "$RODENT_GOROOT_TOP/$version/src/pkg/runtime/" ) 2> /dev/null

  "$RODENT_GOROOT_TOP/$version/bin/go" tool dist bootstrap -v || {
    #No cleanup since this is mostly for cross-compilation, so just warn...
    error "bootstrapping failed"
  }

  info "cleanup download"
  __cleanup "$tmpdir"

  popd > /dev/null 2>&1
}

. "$RODENT_HOME/share/releases" || {
  error "could not locate $RODENT_HOME/share/releases"
  fatal "try running 'rodent system -u'"
}

load_available_versions || fetch_available_versions

while getopts ":hlsfp:" opts
do
  case $opts in
  h|\?)
    usage "$1"
    ;;
  l)
    list_available_versions
    exit 0
    ;;
  p)
    platform=$OPTARG
    ;;
  f)
    force_installation=true
    ;;
  s)
    set_globally=true
    ;;
  *)
    usage "$1"
  esac
done

shift $((OPTIND - 1))

golang_version="$1"
[[ ! "$golang_version" ]] && {
  usage "install"
}

platform="$(__detect_os)_$(__detect_arch) $platform"

__str_in_array "${golang_version}" "${RODENT_GO_RELEASES[@]}" || {
  if [[ ! "$force_installation" ]]
  then
    fatal "unknown version, you can run '-list' for a list of available versions or force the install with the '-f' option"
  fi
}

for re in $platform
do
  __str_in_array "$re" "${RODENT_GO_SUPPORTED_PLATFORMS[@]}" || {
    info "this platform $re is not supported, skipping..."
    continue
  }

  if [ "$(check_local_setup "$golang_version" "$re")" == "1" ]
  then
    info "go version $golang_version for platform $re is already installed"
    continue
  fi

  install_binary "$golang_version" "$re"
done

[[ ! "$set_globally" ]] || {
  info "set version globally"
  rodent set -g "$golang_version"
}
