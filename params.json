{"name":"Rodent","tagline":"Manage Go Versions/Projects/Dependencies","body":"# rodent\r\n[![Build Status](https://drone.io/github.com/alouche/rodent/status.png)](https://drone.io/github.com/alouche/rodent/latest)\r\n\r\nrodent is a shell (bash) application which:\r\n\r\n* Manages multiple versions of Go.\r\n* Allows you to test/build your projects against multiple Go releases at ease.\r\n* Allows cross-compile builds for different platform targets (cgo/stdlib [workaround](https://groups.google.com/d/msg/golang-nuts/2XoGUvBalcw/ErSWiTlO17kJ)).\r\n* Manages/tracks librairies dependencies by expanding the GOPATH\r\n* Create separate workflows within a project per environment (i.e: build projectA with ENV=\"PRD\" on go1.2.2 and ENV=\"DEV\" on go1.3beta2)\r\n\r\nThis is achieved without getting in your way or hijacking your shell executables/builtins by making use of [shims](http://en.wikipedia.org/wiki/Shim_%28computing%29).\r\n\r\n## Install\r\n\r\n> git clone http://github.com/alouhe/rodent.git /my/path/to/rodent\r\n\r\nAdd in your .bashrc, profile etc.\r\n\r\n> [[ -s \"/my/path/to/rodent\" ]] && source \"/my/path/to/rodent\"\r\n\r\nRestart your existing shell or open an new one and you are set. Type \"rodent\".\r\n\r\n## Highlight Features\r\n\r\n* Define a specific go version per project source/directory\r\n  > echo \"gover=go1.2.2\" >> .rodentrc\r\n\r\n  run \"go build\"\r\n\r\n  Want to switch between multiple go versions in the same project (for testing new builds)\r\n  > echo \"gover_ATAG=go1.3beta2\" >> .rodentrc\r\n  \r\n  run\r\n  > export RODENT_ENV=ATAG; go build\r\n  \r\n  Any rodent variables when suffixed with \"\\_<LABEL>\" are scopped as variables for the defined enviroment scope <LABEL>\r\n  \r\n  variables without these <LABEL> suffixes are used as default variables\r\n\r\n* Keep track of your project third party libraries\r\n  > echo \"godeps=/my/project/workspace\" >> .rodentrc\r\n\r\n  A dependency target per environment? easy...\r\n  > echo \"godeps_production=./local/prd/path\" >> .rodentrc\r\n  \r\n  > echo \"godeps_development=./local/dev/path\" >> .rodentrc\r\n  \r\n  run\r\n  > export RODENT_ENV=production; go get\r\n  \r\n  or\r\n  > export RODENT_ENV=experimental; go build\r\n\r\nYou get the idea... so feel free to refer to the [rodentrc guide](https://github.com/alouche/rodent/wiki/rodentrc-file).\r\n\r\n## Usage\r\n\r\n> rodent -h\r\n\r\n### Update rodent\r\n\r\n> rodent system -u\r\n\r\n### List Go releases\r\n\r\n> rodent install -l\r\n\r\n### Install a Go release\r\n\r\n> rodent install go1.2.2\r\n\r\n### Set a version of Go globally\r\n\r\n> rodent set -g go1.2.2\r\n\r\n### Enable cross-compilation for freebsd_amd64\r\n\r\n> rodent install -p freebsd_amd64 go1.2.2\r\n\r\nFor more info, refer to [cross-compilation environment](https://github.com/alouche/rodent/wiki/cross-compilation-setup)\r\n\r\n## Why this project?\r\n\r\n* I wanted something light/small which allowed all the above while being transparent and out of the way.\r\n* Managing and tracking my third party libraries by maintaining a separate directory per project which I could simply \"tar; cp and or even git submodule..\" \r\n* I prefer using a custom GOPATH per project (or sometimes have a unique GOPATH for a subset of projects) and wanted to keep the \"standard go workflow way of things\" while maintaining that flexiblity/option.\r\n* This is an experiment.\r\n\r\n### Disclaimer\r\n\r\nThis project is relatively new and not perfect. It still requires a lot of work and does not pretend to be better than the numerous awesome tools the Golang community has created. It is just one way of tackling \"Go version and dependency management\", if you like it, use it and feel free to contribute.\r\n\r\n## Contributing\r\n\r\nrodent is not locked to a specific way of doing things, so if you have or found a better way to do things or tackle some of the challenges listed here, then I would love to hear of it, so \"Go\" forth - fork, patch, submit and inspire. The only dependency is that rodent should remain non-intrusive to the user's workflow and relatively light.\r\n\r\n## Other tools in the same category\r\n* [GVM](https://github.com/moovweb/gvm)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2014 Ali Abbas\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}