
. "$RODENT_HOME/env/settings"

functions=(shell debug logging init usage)

for function in "${functions[@]}"
do
  . "$RODENT_HOME/functions/$function"
done

# Helper built-in functions

#TODO conside adding a timeout
# --max-time
__curl() {
  local url="$*"
  which curl >/dev/null 2>&1 || {
    error "rodent requires 'curl'..."
  }

  curl -L -s -S $url
}

_git() {
  local str="$*"
  which git >/dev/null 2>&1 || {
    error "rodent requires 'git'..."
  }


  git $str
}

__tar() {
  local arg="$*"
  which tar >/dev/null 2>&1 || {
    error "rodent requires the 'tar' utility"
  }

  tar $arg
}

__download() {
  code=$(__curl "$1" --write-out %\{http_code\} --output "$2")
  (( code == 200 )) || return 1
  return 0
}

__untar() {
  tar_file="$1"
  target_dir="$2"

  [[ -d "$target_dir" ]] || mkdir -p "$target_dir"

  __tar -zxf "$tar_file" -C "$target_dir" --strip-components 1 || {
    fatal "the extraction of the archive failed"
  }
}

__cleanup() {
  file="$1"
  if [ -d "$file" ]
  then
    rm -Rf "$file"
  else
    unlink "$file"
  fi
}

__str_in_list() {
  local entry="$1"
  local list="$2"

  [[ "${list/$entry}" = "$list" ]] && return 1

  return 0
}

__str_in_array() {
  local param=$#
  local entry=${!param}

  for ((i=1;i < $#;i++))
  do
    if [ "${!i}" == "${entry}" ]
    then
      echo $i
    fi
  done
}

__str_to_x_case() {
  if [ "${BASH_VERSINFO[0]}" -lt 4 ]
  then
    local str
    str="$1";
    if [ "$2" == "up" ]
    then
      a1=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)
      a2=(a b c d e f g h i j k l m n o p q r s t u v w x y z)
    else
      a1=(a b c d e f g h i j k l m n o p q r s t u v w x y z)
      a2=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)
    fi

    for ((tmp=0;tmp<${#a1[*]};tmp++))
    do
      str=${str//${a2[$tmp]}/${a1[$tmp]}};
    done
    echo "$str"
  else
    if [ "$2" == "up" ]
    then
      echo "${1^,}"
    else
      echo "${1,,}"
    fi
  fi
  return 0
}

__go_version() {
  which go >/dev/null || {
    return
  }

  local version
  version="$(go version)"
  echo "$version"
}

__detect_os() {
  platform="$(uname -s)"
  __str_to_x_case "$platform" "down"
}

__detect_arch() {
  arch="386"
  if [ "$(uname -m)" = "x86_64" ]
  then
    arch="amd64"
  fi

  echo $arch
}

__validate_confirmation() {
  local msg="$*"
  read -p "$msg [Y/n]" -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    return 0
  fi
  return 1
}
